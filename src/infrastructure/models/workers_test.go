// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWorkers(t *testing.T) {
	t.Parallel()

	query := Workers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWorkersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Workers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Workers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Workers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Workers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WorkerExists(ctx, tx, o.WorkerID)
	if err != nil {
		t.Errorf("Unable to check if Worker exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WorkerExists to return true, but got false.")
	}
}

func testWorkersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	workerFound, err := FindWorker(ctx, tx, o.WorkerID)
	if err != nil {
		t.Error(err)
	}

	if workerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWorkersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Workers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWorkersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Workers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWorkersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	workerOne := &Worker{}
	workerTwo := &Worker{}
	if err = randomize.Struct(seed, workerOne, workerDBTypes, false, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}
	if err = randomize.Struct(seed, workerTwo, workerDBTypes, false, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Workers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWorkersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	workerOne := &Worker{}
	workerTwo := &Worker{}
	if err = randomize.Struct(seed, workerOne, workerDBTypes, false, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}
	if err = randomize.Struct(seed, workerTwo, workerDBTypes, false, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Workers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func workerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Worker) error {
	*o = Worker{}
	return nil
}

func workerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Worker) error {
	*o = Worker{}
	return nil
}

func workerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Worker) error {
	*o = Worker{}
	return nil
}

func workerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Worker) error {
	*o = Worker{}
	return nil
}

func workerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Worker) error {
	*o = Worker{}
	return nil
}

func workerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Worker) error {
	*o = Worker{}
	return nil
}

func workerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Worker) error {
	*o = Worker{}
	return nil
}

func workerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Worker) error {
	*o = Worker{}
	return nil
}

func workerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Worker) error {
	*o = Worker{}
	return nil
}

func testWorkersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Worker{}
	o := &Worker{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, workerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Worker object: %s", err)
	}

	AddWorkerHook(boil.BeforeInsertHook, workerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	workerBeforeInsertHooks = []WorkerHook{}

	AddWorkerHook(boil.AfterInsertHook, workerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	workerAfterInsertHooks = []WorkerHook{}

	AddWorkerHook(boil.AfterSelectHook, workerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	workerAfterSelectHooks = []WorkerHook{}

	AddWorkerHook(boil.BeforeUpdateHook, workerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	workerBeforeUpdateHooks = []WorkerHook{}

	AddWorkerHook(boil.AfterUpdateHook, workerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	workerAfterUpdateHooks = []WorkerHook{}

	AddWorkerHook(boil.BeforeDeleteHook, workerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	workerBeforeDeleteHooks = []WorkerHook{}

	AddWorkerHook(boil.AfterDeleteHook, workerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	workerAfterDeleteHooks = []WorkerHook{}

	AddWorkerHook(boil.BeforeUpsertHook, workerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	workerBeforeUpsertHooks = []WorkerHook{}

	AddWorkerHook(boil.AfterUpsertHook, workerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	workerAfterUpsertHooks = []WorkerHook{}
}

func testWorkersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Workers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(workerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Workers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkerOneToOneAuthUsingAuth(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign Auth
	var local Worker

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.WorkerID = local.WorkerID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Auth().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.WorkerID != foreign.WorkerID {
		t.Errorf("want: %v, got %v", foreign.WorkerID, check.WorkerID)
	}

	ranAfterSelectHook := false
	AddAuthHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Auth) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := WorkerSlice{&local}
	if err = local.L.LoadAuth(ctx, tx, false, (*[]*Worker)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Auth == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Auth = nil
	if err = local.L.LoadAuth(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Auth == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testWorkerOneToOneSetOpAuthUsingAuth(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Worker
	var b, c Auth

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workerDBTypes, false, strmangle.SetComplement(workerPrimaryKeyColumns, workerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authDBTypes, false, strmangle.SetComplement(authPrimaryKeyColumns, authColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authDBTypes, false, strmangle.SetComplement(authPrimaryKeyColumns, authColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Auth{&b, &c} {
		err = a.SetAuth(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Auth != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Worker != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.WorkerID != x.WorkerID {
			t.Error("foreign key was wrong value", a.WorkerID)
		}

		if exists, err := AuthExists(ctx, tx, x.WorkerID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.WorkerID != x.WorkerID {
			t.Error("foreign key was wrong value", a.WorkerID, x.WorkerID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testWorkersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Workers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	workerDBTypes = map[string]string{`WorkerID`: `varchar`, `Name`: `varchar`, `Status`: `int`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_             = bytes.MinRead
)

func testWorkersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(workerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(workerAllColumns) == len(workerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Workers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workerDBTypes, true, workerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWorkersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(workerAllColumns) == len(workerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Worker{}
	if err = randomize.Struct(seed, o, workerDBTypes, true, workerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Workers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workerDBTypes, true, workerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(workerAllColumns, workerPrimaryKeyColumns) {
		fields = workerAllColumns
	} else {
		fields = strmangle.SetComplement(
			workerAllColumns,
			workerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WorkerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWorkersUpsert(t *testing.T) {
	t.Parallel()

	if len(workerAllColumns) == len(workerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLWorkerUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Worker{}
	if err = randomize.Struct(seed, &o, workerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Worker: %s", err)
	}

	count, err := Workers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, workerDBTypes, false, workerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Worker struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Worker: %s", err)
	}

	count, err = Workers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
