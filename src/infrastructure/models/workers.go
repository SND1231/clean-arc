// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Worker is an object representing the database table.
type Worker struct {
	WorkerID string `boil:"worker_id" json:"worker_id" toml:"worker_id" yaml:"worker_id"`
	Name     string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// 0:非活性, 1:活性
	Status    int       `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *workerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L workerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WorkerColumns = struct {
	WorkerID  string
	Name      string
	Status    string
	CreatedAt string
	UpdatedAt string
}{
	WorkerID:  "worker_id",
	Name:      "name",
	Status:    "status",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var WorkerTableColumns = struct {
	WorkerID  string
	Name      string
	Status    string
	CreatedAt string
	UpdatedAt string
}{
	WorkerID:  "workers.worker_id",
	Name:      "workers.name",
	Status:    "workers.status",
	CreatedAt: "workers.created_at",
	UpdatedAt: "workers.updated_at",
}

// Generated where

var WorkerWhere = struct {
	WorkerID  whereHelperstring
	Name      whereHelperstring
	Status    whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	WorkerID:  whereHelperstring{field: "`workers`.`worker_id`"},
	Name:      whereHelperstring{field: "`workers`.`name`"},
	Status:    whereHelperint{field: "`workers`.`status`"},
	CreatedAt: whereHelpertime_Time{field: "`workers`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`workers`.`updated_at`"},
}

// WorkerRels is where relationship names are stored.
var WorkerRels = struct {
	Auth string
}{
	Auth: "Auth",
}

// workerR is where relationships are stored.
type workerR struct {
	Auth *Auth `boil:"Auth" json:"Auth" toml:"Auth" yaml:"Auth"`
}

// NewStruct creates a new relationship struct
func (*workerR) NewStruct() *workerR {
	return &workerR{}
}

func (r *workerR) GetAuth() *Auth {
	if r == nil {
		return nil
	}
	return r.Auth
}

// workerL is where Load methods for each relationship are stored.
type workerL struct{}

var (
	workerAllColumns            = []string{"worker_id", "name", "status", "created_at", "updated_at"}
	workerColumnsWithoutDefault = []string{"worker_id", "name", "status", "created_at", "updated_at"}
	workerColumnsWithDefault    = []string{}
	workerPrimaryKeyColumns     = []string{"worker_id"}
	workerGeneratedColumns      = []string{}
)

type (
	// WorkerSlice is an alias for a slice of pointers to Worker.
	// This should almost always be used instead of []Worker.
	WorkerSlice []*Worker
	// WorkerHook is the signature for custom Worker hook methods
	WorkerHook func(context.Context, boil.ContextExecutor, *Worker) error

	workerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	workerType                 = reflect.TypeOf(&Worker{})
	workerMapping              = queries.MakeStructMapping(workerType)
	workerPrimaryKeyMapping, _ = queries.BindMapping(workerType, workerMapping, workerPrimaryKeyColumns)
	workerInsertCacheMut       sync.RWMutex
	workerInsertCache          = make(map[string]insertCache)
	workerUpdateCacheMut       sync.RWMutex
	workerUpdateCache          = make(map[string]updateCache)
	workerUpsertCacheMut       sync.RWMutex
	workerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var workerAfterSelectHooks []WorkerHook

var workerBeforeInsertHooks []WorkerHook
var workerAfterInsertHooks []WorkerHook

var workerBeforeUpdateHooks []WorkerHook
var workerAfterUpdateHooks []WorkerHook

var workerBeforeDeleteHooks []WorkerHook
var workerAfterDeleteHooks []WorkerHook

var workerBeforeUpsertHooks []WorkerHook
var workerAfterUpsertHooks []WorkerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Worker) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Worker) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Worker) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Worker) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Worker) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Worker) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Worker) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Worker) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Worker) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWorkerHook registers your hook function for all future operations.
func AddWorkerHook(hookPoint boil.HookPoint, workerHook WorkerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		workerAfterSelectHooks = append(workerAfterSelectHooks, workerHook)
	case boil.BeforeInsertHook:
		workerBeforeInsertHooks = append(workerBeforeInsertHooks, workerHook)
	case boil.AfterInsertHook:
		workerAfterInsertHooks = append(workerAfterInsertHooks, workerHook)
	case boil.BeforeUpdateHook:
		workerBeforeUpdateHooks = append(workerBeforeUpdateHooks, workerHook)
	case boil.AfterUpdateHook:
		workerAfterUpdateHooks = append(workerAfterUpdateHooks, workerHook)
	case boil.BeforeDeleteHook:
		workerBeforeDeleteHooks = append(workerBeforeDeleteHooks, workerHook)
	case boil.AfterDeleteHook:
		workerAfterDeleteHooks = append(workerAfterDeleteHooks, workerHook)
	case boil.BeforeUpsertHook:
		workerBeforeUpsertHooks = append(workerBeforeUpsertHooks, workerHook)
	case boil.AfterUpsertHook:
		workerAfterUpsertHooks = append(workerAfterUpsertHooks, workerHook)
	}
}

// One returns a single worker record from the query.
func (q workerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Worker, error) {
	o := &Worker{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for workers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Worker records from the query.
func (q workerQuery) All(ctx context.Context, exec boil.ContextExecutor) (WorkerSlice, error) {
	var o []*Worker

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Worker slice")
	}

	if len(workerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Worker records in the query.
func (q workerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count workers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q workerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if workers exists")
	}

	return count > 0, nil
}

// Auth pointed to by the foreign key.
func (o *Worker) Auth(mods ...qm.QueryMod) authQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`worker_id` = ?", o.WorkerID),
	}

	queryMods = append(queryMods, mods...)

	return Auths(queryMods...)
}

// LoadAuth allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (workerL) LoadAuth(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorker interface{}, mods queries.Applicator) error {
	var slice []*Worker
	var object *Worker

	if singular {
		var ok bool
		object, ok = maybeWorker.(*Worker)
		if !ok {
			object = new(Worker)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWorker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWorker))
			}
		}
	} else {
		s, ok := maybeWorker.(*[]*Worker)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWorker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWorker))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workerR{}
		}
		args = append(args, object.WorkerID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workerR{}
			}

			for _, a := range args {
				if a == obj.WorkerID {
					continue Outer
				}
			}

			args = append(args, obj.WorkerID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`auth`),
		qm.WhereIn(`auth.worker_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Auth")
	}

	var resultSlice []*Auth
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Auth")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for auth")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auth")
	}

	if len(authAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Auth = foreign
		if foreign.R == nil {
			foreign.R = &authR{}
		}
		foreign.R.Worker = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WorkerID == foreign.WorkerID {
				local.R.Auth = foreign
				if foreign.R == nil {
					foreign.R = &authR{}
				}
				foreign.R.Worker = local
				break
			}
		}
	}

	return nil
}

// SetAuth of the worker to the related item.
// Sets o.R.Auth to related.
// Adds o to related.R.Worker.
func (o *Worker) SetAuth(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Auth) error {
	var err error

	if insert {
		related.WorkerID = o.WorkerID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `auth` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"worker_id"}),
			strmangle.WhereClause("`", "`", 0, authPrimaryKeyColumns),
		)
		values := []interface{}{o.WorkerID, related.WorkerID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.WorkerID = o.WorkerID
	}

	if o.R == nil {
		o.R = &workerR{
			Auth: related,
		}
	} else {
		o.R.Auth = related
	}

	if related.R == nil {
		related.R = &authR{
			Worker: o,
		}
	} else {
		related.R.Worker = o
	}
	return nil
}

// Workers retrieves all the records using an executor.
func Workers(mods ...qm.QueryMod) workerQuery {
	mods = append(mods, qm.From("`workers`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`workers`.*"})
	}

	return workerQuery{q}
}

// FindWorker retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWorker(ctx context.Context, exec boil.ContextExecutor, workerID string, selectCols ...string) (*Worker, error) {
	workerObj := &Worker{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `workers` where `worker_id`=?", sel,
	)

	q := queries.Raw(query, workerID)

	err := q.Bind(ctx, exec, workerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from workers")
	}

	if err = workerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return workerObj, err
	}

	return workerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Worker) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no workers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	workerInsertCacheMut.RLock()
	cache, cached := workerInsertCache[key]
	workerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			workerAllColumns,
			workerColumnsWithDefault,
			workerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(workerType, workerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(workerType, workerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `workers` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `workers` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `workers` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, workerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into workers")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.WorkerID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for workers")
	}

CacheNoHooks:
	if !cached {
		workerInsertCacheMut.Lock()
		workerInsertCache[key] = cache
		workerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Worker.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Worker) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	workerUpdateCacheMut.RLock()
	cache, cached := workerUpdateCache[key]
	workerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			workerAllColumns,
			workerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update workers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `workers` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, workerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(workerType, workerMapping, append(wl, workerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update workers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for workers")
	}

	if !cached {
		workerUpdateCacheMut.Lock()
		workerUpdateCache[key] = cache
		workerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q workerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for workers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for workers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WorkerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `workers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in worker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all worker")
	}
	return rowsAff, nil
}

var mySQLWorkerUniqueColumns = []string{
	"worker_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Worker) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no workers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWorkerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	workerUpsertCacheMut.RLock()
	cache, cached := workerUpsertCache[key]
	workerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			workerAllColumns,
			workerColumnsWithDefault,
			workerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			workerAllColumns,
			workerPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert workers, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`workers`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `workers` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(workerType, workerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(workerType, workerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for workers")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(workerType, workerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for workers")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for workers")
	}

CacheNoHooks:
	if !cached {
		workerUpsertCacheMut.Lock()
		workerUpsertCache[key] = cache
		workerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Worker record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Worker) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Worker provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), workerPrimaryKeyMapping)
	sql := "DELETE FROM `workers` WHERE `worker_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from workers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for workers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q workerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no workerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from workers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for workers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WorkerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(workerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `workers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from worker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for workers")
	}

	if len(workerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Worker) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWorker(ctx, exec, o.WorkerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WorkerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WorkerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `workers`.* FROM `workers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WorkerSlice")
	}

	*o = slice

	return nil
}

// WorkerExists checks if the Worker row exists.
func WorkerExists(ctx context.Context, exec boil.ContextExecutor, workerID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `workers` where `worker_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, workerID)
	}
	row := exec.QueryRowContext(ctx, sql, workerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if workers exists")
	}

	return exists, nil
}

// Exists checks if the Worker row exists.
func (o *Worker) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WorkerExists(ctx, exec, o.WorkerID)
}
